package com.company;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.geom.RoundRectangle2D;

import javax.swing.JPanel;

class karta extends JPanel
{
    public static enum wartosc
    {
        as, dwa, trzy, cztery, piec, szesc, siedem, osiem, dziwiec, dziesiec, jopek, krolowa, krol
    }

    public static enum zestaww
    {
        pik, trefl, karo, serce
    }

    private zestaww karty;

    private wartosc _wartosc;

    private Boolean powrot;

    private Point lokacja;

    private Point polozenie;


    private int x;
    private int y;

    private final int wylonczony1 = 10;
    private final int wylonczony2 = 20;
    private final int new_x_offset = wylonczony1 + (szerokosckarty - 30);
    final static public int wysokockarty = 150;

    final static public int szerokosckarty = 100;

    final static public int naroznik = 25;

    karta(zestaww suit, wartosc value)
    {
        karty = suit;
        _wartosc = value;
        powrot = false;
        lokacja = new Point();
        x = 0;
        y = 0;
        lokacja.x = x;
        lokacja.y = y;
        polozenie = new Point();
    }

    karta()
    {
        karty = zestaww.trefl;
        _wartosc = wartosc.as;
        powrot = false;
        lokacja = new Point();
        x = 0;
        y = 0;
        lokacja.x = x;
        lokacja.y = y;
        polozenie = new Point();
    }

    public zestaww getSuit()
    {
        switch (karty)
        {
            case serce:
                System.out.println("SERCE ❤");
                break;
            case karo:
                System.out.println("KARO ♦");
                break;
            case pik:
                System.out.println("PIK ♠");
                break;
            case trefl:
                System.out.println("TREFL ♣");
                break;
        }
        return karty;
    }

    public wartosc getValue()
    {
        switch (_wartosc)
        {
            case as:
                System.out.println(" As");
                break;
            case dwa:
                System.out.println(" 2");
                break;
            case trzy:
                System.out.println(" 3");
                break;
            case cztery:
                System.out.println(" 4");
                break;
            case piec:
                System.out.println(" 5");
                break;
            case szesc:
                System.out.println(" 6");
                break;
            case siedem:
                System.out.println(" 7");
                break;
            case osiem:
                System.out.println(" 8");
                break;
            case dziwiec:
                System.out.println(" 9");
                break;
            case dziesiec:
                System.out.println(" 10");
                break;
            case jopek:
                System.out.println(" jopek");
                break;
            case krolowa:
                System.out.println(" królowa");
                break;
            case krol:
                System.out.println(" król");
                break;
        }
        return _wartosc;
    }

    public void setWhereAmI(Point p)
    {
        polozenie = p;
    }

    public Point getWhereAmI()
    {
        return polozenie;
    }

    public Point getXY()
    {
        return new Point(x, y);
    }

    public Boolean wwa3()
    {
        return powrot;
    }

    public void setXY(Point p)
    {
        x = p.x;
        y = p.y;

    }

    public void setSuit(zestaww suit)
    {
        karty = suit;
    }

    public void setValue(wartosc value)
    {
        _wartosc = value;
    }

    public karta pokazgora()
    {
        powrot = true;
        return this;
    }

    public karta setFacedown()
    {
        powrot = false;
        return this;
    }

    @Override
    public boolean contains(Point p)
    {
        Rectangle rect = new Rectangle(polozenie.x, polozenie.y, karta.szerokosckarty, karta.wysokockarty);
        return (rect.contains(p));
    }

    private void drawSuit(Graphics2D g, String suit, Color color)
    {
        g.setColor(color);
        g.drawString(suit, lokacja.x + wylonczony1, lokacja.y + wylonczony2);
        g.drawString(suit, lokacja.x + wylonczony1, lokacja.y + wysokockarty - 5);
    }

    private void drawValue(Graphics2D g, String value)
    {
        g.drawString(value, lokacja.x + new_x_offset, lokacja.y + wylonczony2);
        g.drawString(value, lokacja.x + new_x_offset, lokacja.y + wylonczony2 + wysokockarty - 25);
    }

    @Override
    public void paintComponent(Graphics g)
    {
        Graphics2D g2d = (Graphics2D) g;
        RoundRectangle2D rect2 = new RoundRectangle2D.Double(lokacja.x, lokacja.y, szerokosckarty, wysokockarty,
                naroznik, naroznik);
        g2d.setColor(Color.LIGHT_GRAY);
        g2d.fill(rect2);
        g2d.setColor(Color.black);
        g2d.draw(rect2);
        if (powrot)
        {
            switch (karty)
            {
                case serce:
                    drawSuit(g2d, "SERCE ❤", Color.RED);
                    break;
                case karo:
                    drawSuit(g2d, "KARO ♦", Color.RED);
                    break;
                case pik:
                    drawSuit(g2d, "PIK ♠", Color.BLACK);
                    break;
                case trefl:
                    drawSuit(g2d, "TREFL ♣", Color.BLACK);
                    break;
            }
            int new_x_offset = wylonczony1 + (szerokosckarty - 30);
            switch (_wartosc)
            {
                case as:
                    drawValue(g2d, "AS");
                    break;
                case dwa:
                    drawValue(g2d, "2");
                    break;
                case trzy:
                    drawValue(g2d, "3");
                    break;
                case cztery:
                    drawValue(g2d, "4");
                    break;
                case piec:
                    drawValue(g2d, "5");
                    break;
                case szesc:
                    drawValue(g2d, "6");
                    break;
                case siedem:
                    drawValue(g2d, "7");
                    break;
                case osiem:
                    drawValue(g2d, "8");
                    break;
                case dziwiec:
                    drawValue(g2d, "9");
                    break;
                case dziesiec:
                    drawValue(g2d, "10");
                    break;
                case jopek:
                    drawValue(g2d, "J");
                    break;
                case krolowa:
                    drawValue(g2d, "D");
                    break;
                case krol:
                    drawValue(g2d, "K");
                    break;
            }
        } else
        {
            RoundRectangle2D rect = new RoundRectangle2D.Double(lokacja.x, lokacja.y, szerokosckarty, wysokockarty,
                    naroznik, naroznik);
            g2d.setColor(Color.LIGHT_GRAY);
            g2d.fill(rect);
            g2d.setColor(Color.black);
            g2d.draw(rect);
        }

    }

}

