package com.company;

import java.awt.Graphics;
import java.awt.Point;
import java.awt.Rectangle;
import java.util.ListIterator;
import java.util.Vector;

import javax.swing.JComponent;


class karciochy extends JComponent
{
    protected Vector<karta> v = new Vector<>();
    protected boolean graj = false;
    protected int ilosc = 18;
    protected int _x = 0;
    protected int _y = 0;

    public karciochy(boolean karti)
    {
        this.setLayout(null);
        if (karti)
        {
            for (karta.zestaww zestaaww : karta.zestaww.values())
            {
                for (karta.wartosc value : karta.wartosc.values())
                {
                    v.add(new karta(zestaaww, value));
                }
            }
        } else
        {
            graj = true;
        }
    }

    public boolean pusty()
    {
        return v.isEmpty();
    }

    public void pierwszy(karta c)
    {
        v.add(0, c);
    }

    public karta wwa5()
    {
        if (!this.pusty())
        {
            return v.get(0);
        } else
            return null;
    }

    public karta getLast()
    {
        if (!this.pusty())
        {
            return v.lastElement();
        } else
            return null;
    }

    public karta popFirst()
    {
        if (!this.pusty())
        {
            karta c = this.wwa5();
            v.remove(0);
            return c;
        } else
            return null;

    }

    public void pchanie(karta c)
    {
        v.add(c);
    }

    public karta pop()
    {
        if (!this.pusty())
        {
            karta c = v.lastElement();
            v.remove(v.size() - 1);
            return c;
        } else
            return null;
    }

    public void tasacja()
    {
        Vector<karta> v = new Vector<>();
        while (!this.pusty())
        {
            v.add(this.pop());
        }
        while (!v.isEmpty())
        {
            karta c = v.elementAt((int) (Math.random() * v.size()));
            this.pchanie(c);
            v.removeElement(c);
        }

    }

    public int pokarozmiar()
    {
        System.out.println("numer: " + v.size());
        return v.size();
    }

    public void makeEmpty()
    {
        while (!this.pusty())
        {
            this.popFirst();
        }
    }

    @Override
    public boolean contains(Point p)
    {
        Rectangle rect = new Rectangle(_x, _y, karta.szerokosckarty + 10, karta.wysokockarty * 3);
        return (rect.contains(p));
    }

    public void setXY(int x, int y)
    {
        _x = x;
        _y = y;
        setBounds(_x, _y, karta.szerokosckarty + 10, karta.wysokockarty * 3);
    }

    public Point getXY()
    {
        return new Point(_x, _y);
    }

    @Override
    protected void paintComponent(Graphics g)
    {
        super.paintComponent(g);
        if (graj)
        {
            removeAll();
            ListIterator<karta> iter = v.listIterator();
            Point lascik  = new Point();
            Point lokacjon = new Point();
            if (iter.hasNext())
            {
                karta c = iter.next();
                lascik  = new Point();
                add(Main.ruchkarta(c, lascik .x, lascik .y));
                c.setWhereAmI(getXY());
                lokacjon = getXY();
            } else
            {
                removeAll();
            }

            while (iter.hasNext()) {
                karta c = iter.next();
                c.setXY(new Point(lascik .x, lascik .y + ilosc));
                add(Main.ruchkarta(c, lascik .x, lascik .y + ilosc));
                lascik = c.getXY();
                c.setWhereAmI(new Point(lokacjon.x, lokacjon.y + ilosc));
                lokacjon = c.getWhereAmI();
            }

        }
    }
}
